import { NextResponse } from "next/server"
import dbConnect from "@/lib/mongodb"
import mongoose from "mongoose"

const ConfiguracionSchema = new mongoose.Schema(
  {
    nombreEmpresa: { type: String, default: "Ap√≠cola Dorada" },
    tituloPagina: { type: String, default: "Miel Pura y Natural Directo del Colmenar" },
    subtituloPagina: { type: String, default: "Descubre nuestra selecci√≥n de productos ap√≠colas..." },
    telefono: { type: String, default: "+57 300 123 4567" },
    direccion: { type: String, default: "Finca La Colmena, Vereda El Panal" },
    email: { type: String, default: "contacto@apicoladorada.com" },
    facebook: { type: String, default: "https://facebook.com/apicoladorada" },
    instagram: { type: String, default: "https://instagram.com/apicoladorada" },
    x: { type: String, default: "https://x.com/apicoladorada" },
    tiktok: { type: String, default: "https://tiktok.com/@apicoladorada" },
    imagenes: [{ type: String }],
    logo: { type: String, default: "üçØ" },
    tipoLogo: { type: String, enum: ["predefinido", "personalizado"], default: "predefinido" },
  },
  { timestamps: true },
)

const Configuracion = mongoose.models.Configuracion || mongoose.model("Configuracion", ConfiguracionSchema)

export async function GET() {
  try {
    await dbConnect()
    let configuracion = await Configuracion.findOne()

    if (!configuracion) {
      console.log("üìù Creando configuraci√≥n por defecto")
      configuracion = await Configuracion.create({})
    }

    console.log("üìñ Configuraci√≥n obtenida de BD:", {
      logo: configuracion.logo?.substring(0, 50) + (configuracion.logo?.length > 50 ? "..." : ""),
      tipoLogo: configuracion.tipoLogo,
      nombreEmpresa: configuracion.nombreEmpresa,
    })

    return NextResponse.json({
      success: true,
      configuracion,
    })
  } catch (error: any) {
    console.error("‚ùå Error al obtener configuraci√≥n:", error)
    return NextResponse.json({ success: false, error: "Error al obtener configuraci√≥n" }, { status: 500 })
  }
}

export async function POST(request: Request) {
  try {
    await dbConnect()
    const data = await request.json()

    console.log("üíæ Guardando configuraci√≥n en BD:", {
      logo: data.logo?.substring(0, 50) + (data.logo?.length > 50 ? "..." : ""),
      tipoLogo: data.tipoLogo,
      nombreEmpresa: data.nombreEmpresa,
    })

    let configuracion = await Configuracion.findOne()

    if (configuracion) {
      // Actualizar configuraci√≥n existente
      configuracion = await Configuracion.findOneAndUpdate({}, data, {
        new: true,
        upsert: true,
        runValidators: true,
      })
      console.log("‚úÖ Configuraci√≥n actualizada en BD")
    } else {
      // Crear nueva configuraci√≥n
      configuracion = await Configuracion.create(data)
      console.log("‚úÖ Nueva configuraci√≥n creada en BD")
    }

    // Verificar que se guard√≥ correctamente
    const verificacion = await Configuracion.findOne()
    console.log("üîç Verificaci√≥n post-guardado:", {
      logo: verificacion.logo?.substring(0, 50) + (verificacion.logo?.length > 50 ? "..." : ""),
      tipoLogo: verificacion.tipoLogo,
      nombreEmpresa: verificacion.nombreEmpresa,
    })

    return NextResponse.json({
      success: true,
      configuracion,
      message: "Configuraci√≥n guardada exitosamente",
    })
  } catch (error: any) {
    console.error("‚ùå Error al guardar configuraci√≥n:", error)
    return NextResponse.json(
      { success: false, error: "Error al guardar configuraci√≥n: " + error.message },
      { status: 500 },
    )
  }
}
